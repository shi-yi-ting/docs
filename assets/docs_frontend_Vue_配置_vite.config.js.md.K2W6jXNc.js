import{_ as s,c as n,o as a,U as p}from"./chunks/framework.zpeVKxWT.js";const v=JSON.parse('{"title":"# vite.config.js配置","description":"","frontmatter":{},"headers":[],"relativePath":"docs/frontend/Vue/配置/vite.config.js.md","filePath":"docs/frontend/Vue/配置/vite.config.js.md"}'),e={name:"docs/frontend/Vue/配置/vite.config.js.md"},l=p(`<h1 id="vite-config-js配置" tabindex="-1"># vite.config.js配置 <a class="header-anchor" href="#vite-config-js配置" aria-label="Permalink to &quot;# vite.config.js配置&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>/* eslint-disable new-cap */</span></span>
<span class="line"><span>import path from &#39;path&#39;</span></span>
<span class="line"><span>const pathSrc = path.resolve(__dirname, &#39;src&#39;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import AutoImport from &#39;unplugin-auto-import/vite&#39; // 按需自动导入API</span></span>
<span class="line"><span>import Components from &#39;unplugin-vue-components/vite&#39; // 按需自动导入组件</span></span>
<span class="line"><span>import { ElementPlusResolver, AntDesignVueResolver } from &#39;unplugin-vue-components/resolvers&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// import md from &#39;vite-plugin-md&#39; // markDown文件处理</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 适配</span></span>
<span class="line"><span>import postCssPxToRem from &#39;postcss-pxtorem&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import { defineConfig } from &#39;vite&#39;</span></span>
<span class="line"><span>import vue from &#39;@vitejs/plugin-vue&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// https://vitejs.dev/config/</span></span>
<span class="line"><span>export default defineConfig({</span></span>
<span class="line"><span>    base: &#39;/docs&#39;,</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    server: {</span></span>
<span class="line"><span>        host: &#39;0.0.0.0&#39;, // ip地址</span></span>
<span class="line"><span>        port: 8086, // 端口</span></span>
<span class="line"><span>        // open: true, // 服务启动时自动在浏览器中打开应用</span></span>
<span class="line"><span>        // https: false,//是否启用 http 2</span></span>
<span class="line"><span>        // cors: true,//为开发服务器配置 CORS , 默认启用并允许任何源</span></span>
<span class="line"><span>        // strictPort: false, //设为true时端口被占用则直接退出，不会尝试下一个可用端口</span></span>
<span class="line"><span>        // force: true,//是否强制依赖预构建</span></span>
<span class="line"><span>        // hmr: true,//禁用或配置 HMR 连接</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    plugins: [</span></span>
<span class="line"><span>        vue(),</span></span>
<span class="line"><span>        // md(),</span></span>
<span class="line"><span>        // Markdown({</span></span>
<span class="line"><span>        //     importMode: &#39;source&#39;, // 使用 &#39;source&#39; 模式以导入 Markdown 文件作为字符串</span></span>
<span class="line"><span>        // }),</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        AutoImport({ // 自动导入 Vue 相关函数，如：ref, reactive, toRef 等</span></span>
<span class="line"><span>            imports: [&#39;vue&#39;],</span></span>
<span class="line"><span>            eslintrc: {</span></span>
<span class="line"><span>                enabled: true, // 是否自动生成 eslint 规则，建议生成之后设置 false</span></span>
<span class="line"><span>                filepath: &#39;./.eslintrc-auto-import.json&#39;, // 指定自动导入函数 eslint 规则的文件</span></span>
<span class="line"><span>            },</span></span>
<span class="line"><span>            dts: path.resolve(pathSrc, &#39;types&#39;, &#39;auto-imports.d.ts&#39;), // 指定自动导入函数TS类型声明文件路径</span></span>
<span class="line"><span>            resolvers: [</span></span>
<span class="line"><span>                ElementPlusResolver(),</span></span>
<span class="line"><span>            ],</span></span>
<span class="line"><span>        }),</span></span>
<span class="line"><span>        Components({ // 按需加载自定义组件</span></span>
<span class="line"><span>            deep: true, // 搜索子目录</span></span>
<span class="line"><span>            dirs: [&#39;src/components&#39;], // 按需加载的文件夹</span></span>
<span class="line"><span>            resolvers: [</span></span>
<span class="line"><span>                ElementPlusResolver(), // ElementPlus按需加载</span></span>
<span class="line"><span>                AntDesignVueResolver(), // 貌似这种还无法 4 版本的样式</span></span>
<span class="line"><span>            ],</span></span>
<span class="line"><span>        }),</span></span>
<span class="line"><span>    ],</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    resolve: {</span></span>
<span class="line"><span>        alias: {</span></span>
<span class="line"><span>        // &#39;@&#39;: fileURLToPath(new URL(&#39;./src&#39;, import.meta.url)),</span></span>
<span class="line"><span>            &#39;@&#39;: pathSrc,</span></span>
<span class="line"><span>            &#39;/\\\\.md$/&#39;: &#39;raw-loader&#39;, // 添加 .md 文件处理的自定义加载器</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    css: {</span></span>
<span class="line"><span>        postcss: {</span></span>
<span class="line"><span>            plugins: [</span></span>
<span class="line"><span>                postCssPxToRem({</span></span>
<span class="line"><span>                    // 自适应，px&gt;rem转换</span></span>
<span class="line"><span>                    rootValue: 16, // 相当与把窗口切成120等份</span></span>
<span class="line"><span>                    propList: [&#39;*&#39;], // 需要转换的属性，这里选择全部都进行转换</span></span>
<span class="line"><span>                    selectorBlackList: [&#39;norem&#39;], // 过滤掉norem-开头的class，不进行rem转换，这个内容可以不写</span></span>
<span class="line"><span>                }),</span></span>
<span class="line"><span>            ],</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>})</span></span></code></pre></div>`,2),i=[l];function t(c,o,r,m,u,d){return a(),n("div",null,i)}const h=s(e,[["render",t]]);export{v as __pageData,h as default};
