import{_ as s,c as n,o as a,U as p}from"./chunks/framework.FpOEJISx.js";const g=JSON.parse('{"title":"vue中展示markdown","description":"","frontmatter":{},"headers":[],"relativePath":"docs/article/markdown.md","filePath":"docs/article/markdown.md"}'),l={name:"docs/article/markdown.md"},e=p(`<h1 id="vue中展示markdown" tabindex="-1">vue中展示markdown <a class="header-anchor" href="#vue中展示markdown" aria-label="Permalink to &quot;vue中展示markdown&quot;">​</a></h1><p>参考链接：<a href="https://blog.csdn.net/weixin_42681555/article/details/121603656" target="_blank" rel="noreferrer">https://blog.csdn.net/weixin_42681555/article/details/121603656</a></p><h2 id="_1-首先安装以下依赖" tabindex="-1">1.首先安装以下依赖 <a class="header-anchor" href="#_1-首先安装以下依赖" aria-label="Permalink to &quot;1.首先安装以下依赖&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm install vue-markdown-loader -D</span></span>
<span class="line"><span>npm install vue-loader -D</span></span>
<span class="line"><span>npm install vue-template-compiler -D</span></span>
<span class="line"><span>npm install github-markdown-css -D</span></span>
<span class="line"><span>npm install highlight.js -D</span></span></code></pre></div><h2 id="_2-在-vue-config-js-文件中配置-webpack" tabindex="-1">2.在 vue.config.js 文件中配置 webpack <a class="header-anchor" href="#_2-在-vue-config-js-文件中配置-webpack" aria-label="Permalink to &quot;2.在 vue.config.js 文件中配置 webpack&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>module.exports = {</span></span>
<span class="line"><span>    chainWebpack: (config) =&gt; {</span></span>
<span class="line"><span>        config.module</span></span>
<span class="line"><span>        .rule(&quot;md&quot;)</span></span>
<span class="line"><span>        .test(/反斜杆.md/)</span></span>
<span class="line"><span>        .use(&quot;vue-loader&quot;)</span></span>
<span class="line"><span>        .loader(&quot;vue-loader&quot;)</span></span>
<span class="line"><span>        .end()</span></span>
<span class="line"><span>        .use(&quot;vue-markdown-loader&quot;)</span></span>
<span class="line"><span>        .loader(&quot;vue-markdown-loader/lib/markdown-compiler&quot;)</span></span>
<span class="line"><span>        .options({</span></span>
<span class="line"><span>            raw: true,</span></span>
<span class="line"><span>        });</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>};</span></span></code></pre></div><h2 id="_3-组件中使用时" tabindex="-1">3.组件中使用时 <a class="header-anchor" href="#_3-组件中使用时" aria-label="Permalink to &quot;3.组件中使用时&quot;">​</a></h2><h3 id="单个文件使用可在组件内单独引用" tabindex="-1">单个文件使用可在组件内单独引用 <a class="header-anchor" href="#单个文件使用可在组件内单独引用" aria-label="Permalink to &quot;单个文件使用可在组件内单独引用&quot;">​</a></h3><p>main.js 中引入样式</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// markdown样式</span></span>
<span class="line"><span>import &quot;github-markdown-css&quot;;</span></span>
<span class="line"><span>// 代码高亮</span></span>
<span class="line"><span>import &quot;highlight.js/styles/github.css&quot;; //默认样式</span></span></code></pre></div><h3 id="批量导入多个文件" tabindex="-1">批量导入多个文件 <a class="header-anchor" href="#批量导入多个文件" aria-label="Permalink to &quot;批量导入多个文件&quot;">​</a></h3><p>在 md 文件同目录中创建 index.js 文件，导入 md 文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// md文件批量引入</span></span>
<span class="line"><span>import javaScript_prototype from &quot;./javaScript_prototype.md&quot;;</span></span>
<span class="line"><span>import git_basics from &quot;./git_basics.md&quot;;</span></span>
<span class="line"><span>import click_copy from &quot;./click_copy.md&quot;;</span></span>
<span class="line"><span>// 创建md组件同时设置文章其他信息，单独导出使用</span></span>
<span class="line"><span>export const components = {</span></span>
<span class="line"><span>    click_copy: {</span></span>
<span class="line"><span>        id: 3,</span></span>
<span class="line"><span>        name: click_copy,</span></span>
<span class="line"><span>        type: [&quot;html&quot;, &quot;javaScript&quot;, &quot;vue&quot;],</span></span>
<span class="line"><span>        describe: &quot;JavaScript页面点击复制功能(vue)&quot;,</span></span>
<span class="line"><span>        date: &quot;2021-11-23 15:51:00&quot;,</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    git_basics: {</span></span>
<span class="line"><span>        id: 2,</span></span>
<span class="line"><span>        name: git_basics,</span></span>
<span class="line"><span>        type: [&quot;git&quot;],</span></span>
<span class="line"><span>        describe: &quot;git 基础使用（创建、推送、克隆、拉取、常用指令等）&quot;,</span></span>
<span class="line"><span>        date: &quot;2021-11-23 14:22:00&quot;,</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    javaScript_prototype: {</span></span>
<span class="line"><span>        id: 1,</span></span>
<span class="line"><span>        name: javaScript_prototype,</span></span>
<span class="line"><span>        type: [&quot;javaScript&quot;],</span></span>
<span class="line"><span>        describe: &quot;个人对 javaScript 原型链理解&quot;,</span></span>
<span class="line"><span>        date: &quot;2021-11-22 10:00:00&quot;,</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 注册全部md组件</span></span>
<span class="line"><span>export const mdArticle = function (Vue, opts = {}) {</span></span>
<span class="line"><span>    Object.keys(components).forEach((key) =&gt; {</span></span>
<span class="line"><span>        Vue.component(key, components[key].name);</span></span>
<span class="line"><span>    });</span></span>
<span class="line"><span>};</span></span></code></pre></div><h3 id="在-main-js-文件中引入刚刚创建的-index-js-文件-导出全部-me-组件-全局注册" tabindex="-1">在 main.js 文件中引入刚刚创建的 index.js 文件，导出全部 me 组件，全局注册 <a class="header-anchor" href="#在-main-js-文件中引入刚刚创建的-index-js-文件-导出全部-me-组件-全局注册" aria-label="Permalink to &quot;在 main.js 文件中引入刚刚创建的 index.js 文件，导出全部 me 组件，全局注册&quot;">​</a></h3><p>引入markdown样式和高亮样式</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// markdown样式</span></span>
<span class="line"><span>import &quot;github-markdown-css&quot;;</span></span>
<span class="line"><span>// 代码高亮</span></span>
<span class="line"><span>import &quot;highlight.js/styles/github.css&quot;; //默认样式</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 代码高亮devibeans   swh自定义颜色</span></span>
<span class="line"><span>// import &#39;./assets/css/swh.css&#39;           //自定义样式</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 引入md文章组件列表</span></span>
<span class="line"><span>import { mdArticle } from &quot;./article/index&quot;;</span></span>
<span class="line"><span>Vue.use(mdArticle);</span></span></code></pre></div><h3 id="自定义代码代码块高亮样式-文件中自行修改颜色" tabindex="-1">自定义代码代码块高亮样式（文件中自行修改颜色） <a class="header-anchor" href="#自定义代码代码块高亮样式-文件中自行修改颜色" aria-label="Permalink to &quot;自定义代码代码块高亮样式（文件中自行修改颜色）&quot;">​</a></h3><p>创建 css 文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>/* 代码块高亮样式 */</span></span>
<span class="line"><span>pre code.hljs {</span></span>
<span class="line"><span>    display: block;</span></span>
<span class="line"><span>    overflow-x: auto;</span></span>
<span class="line"><span>    padding: 1em;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>code.hljs {</span></span>
<span class="line"><span>    padding: 3px 5px;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.hljs {</span></span>
<span class="line"><span>    color: #eaeaea;</span></span>
<span class="line"><span>    background: #000;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.hljs-subst {</span></span>
<span class="line"><span>    color: #eaeaea;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.hljs-emphasis {</span></span>
<span class="line"><span>    font-style: italic;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.hljs-strong {</span></span>
<span class="line"><span>    font-weight: 700;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.hljs-type {</span></span>
<span class="line"><span>    color: #eaeaea;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/* 参数 */</span></span>
<span class="line"><span>.hljs-params {</span></span>
<span class="line"><span>    color: #ea00ff;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/* true颜色 */</span></span>
<span class="line"><span>.hljs-literal,</span></span>
<span class="line"><span>.hljs-name,</span></span>
<span class="line"><span>.hljs-number {</span></span>
<span class="line"><span>    color: rgb(105, 195, 255);</span></span>
<span class="line"><span>    font-weight: bolder;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/* 注释颜色 */</span></span>
<span class="line"><span>.hljs-comment {</span></span>
<span class="line"><span>    color: #8a8a8a;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.hljs-quote,</span></span>
<span class="line"><span>.hljs-selector-id {</span></span>
<span class="line"><span>    color: #0ff;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/* 函数颜色 */</span></span>
<span class="line"><span>.hljs-template-variable,</span></span>
<span class="line"><span>.hljs-title,</span></span>
<span class="line"><span>.hljs-variable {</span></span>
<span class="line"><span>    color: #c3bf7b;</span></span>
<span class="line"><span>    font-weight: 700;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/* 对象颜色 */</span></span>
<span class="line"><span>.hljs-keyword,</span></span>
<span class="line"><span>.hljs-selector-class,</span></span>
<span class="line"><span>.hljs-symbol {</span></span>
<span class="line"><span>    color: #9d6bb4;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/* 值的颜色 */</span></span>
<span class="line"><span>.hljs-bullet,</span></span>
<span class="line"><span>.hljs-string {</span></span>
<span class="line"><span>    color: rgb(255, 142, 66);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.hljs-section,</span></span>
<span class="line"><span>.hljs-tag {</span></span>
<span class="line"><span>    color: rgb(105, 195, 255);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.hljs-selector-tag {</span></span>
<span class="line"><span>    color: #000fff;</span></span>
<span class="line"><span>    font-weight: 700;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.hljs-attribute,</span></span>
<span class="line"><span>.hljs-built_in,</span></span>
<span class="line"><span>.hljs-link,</span></span>
<span class="line"><span>.hljs-regexp {</span></span>
<span class="line"><span>    color: rgb(105, 195, 255);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.hljs-meta {</span></span>
<span class="line"><span>    color: #fff;</span></span>
<span class="line"><span>    font-weight: bolder;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="app-vue-可直接覆盖-代码块背景色、代码括号颜色" tabindex="-1">App.vue 可直接覆盖（代码块背景色、代码括号颜色） <a class="header-anchor" href="#app-vue-可直接覆盖-代码块背景色、代码括号颜色" aria-label="Permalink to &quot;App.vue 可直接覆盖（代码块背景色、代码括号颜色）&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;style lang=&quot;less&quot;&gt;</span></span>
<span class="line"><span>#app {</span></span>
<span class="line"><span>    font-family: &quot;楷体&quot;;</span></span>
<span class="line"><span>    -webkit-font-smoothing: antialiased;</span></span>
<span class="line"><span>    -moz-osx-font-smoothing: grayscale;</span></span>
<span class="line"><span>    color: #2c3e50;</span></span>
<span class="line"><span>    .markdown-body .highlight pre,</span></span>
<span class="line"><span>    .markdown-body pre {</span></span>
<span class="line"><span>        background-color: rgb(34, 34, 34); // 代码块背景色改变默认</span></span>
<span class="line"><span>        color: rgb(105, 195, 255); //代码括号颜色</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>&lt;/style&gt;</span></span></code></pre></div><h3 id="组件中直接使-可以根据-parameter-动态显示-md-文件" tabindex="-1">组件中直接使，可以根据 parameter 动态显示 md 文件 <a class="header-anchor" href="#组件中直接使-可以根据-parameter-动态显示-md-文件" aria-label="Permalink to &quot;组件中直接使，可以根据 parameter 动态显示 md 文件&quot;">​</a></h3><p>将 md 文件作为组件导入，注意：class 的值必须包含 markdown-body ，否则样式无法生效！</p><p>parameter 是文章 md 组件名称，通过列表点击传递 name，实现动态显示 md 组件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;template&gt;</span></span>
<span class="line"><span>    &lt;div class=&quot;markdown-body&quot;&gt;</span></span>
<span class="line"><span>        &lt;!-- 文章详情页面 --&gt;</span></span>
<span class="line"><span>        &lt;div class=&quot;details&quot;&gt;</span></span>
<span class="line"><span>            &lt;!-- md文件组件 --&gt;</span></span>
<span class="line"><span>            &lt;component :is=&quot;parameter&quot;&gt;&lt;/component&gt;</span></span>
<span class="line"><span>        &lt;/div&gt;</span></span>
<span class="line"><span>&lt;/div&gt;</span></span>
<span class="line"><span>&lt;/template&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default {</span></span>
<span class="line"><span>    data() {</span></span>
<span class="line"><span>        return {</span></span>
<span class="line"><span>        parameter: &quot;&quot;, //文章对应组件名字</span></span>
<span class="line"><span>        };</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    mounted() {</span></span>
<span class="line"><span>        this.getParameters();</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    methods: {</span></span>
<span class="line"><span>        getParameters() {</span></span>
<span class="line"><span>        // 获取文章参数  点击跳转获取参数  或者 刷新页面从url中获取参数</span></span>
<span class="line"><span>        this.parameter =</span></span>
<span class="line"><span>            this.$route.query.article || location.search.split(&quot;=&quot;)[1];</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>};</span></span></code></pre></div>`,25),i=[e];function t(c,o,r,d,u,h){return a(),n("div",null,i)}const b=s(l,[["render",t]]);export{g as __pageData,b as default};
