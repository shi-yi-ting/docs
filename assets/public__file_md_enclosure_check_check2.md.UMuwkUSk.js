import{_ as s,c as n,o as a,U as p}from"./chunks/framework.zpeVKxWT.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"public/_file/md/enclosure/check/check2.md","filePath":"public/_file/md/enclosure/check/check2.md"}'),l={name:"public/_file/md/enclosure/check/check2.md"},e=p(`<h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;Check2 v-model:value=&quot;value2&quot;&gt;</span></span>
<span class="line"><span>    &lt;span class=&quot;fw_normal&quot;&gt;单选&lt;/span&gt;</span></span>
<span class="line"><span>&lt;/Check2&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;script setup&gt;</span></span>
<span class="line"><span>import { ref } from &#39;vue&#39;</span></span>
<span class="line"><span>import Check2 from &#39;@/views/enclosure/check/check2.vue&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// TODO</span></span>
<span class="line"><span>const value2 = ref(true)</span></span>
<span class="line"><span>&lt;/script&gt;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;template&gt;</span></span>
<span class="line"><span>    &lt;span :class=&quot;classList&quot; :style=&quot;styles&quot; @click=&quot;clickButton&quot;&gt;&lt;slot name=&quot;default&quot; /&gt;&lt;/span&gt;</span></span>
<span class="line"><span>&lt;/template&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;script&gt;</span></span>
<span class="line"><span>import { computed, defineComponent } from &#39;vue&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default defineComponent({</span></span>
<span class="line"><span>    components: {</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    props: {</span></span>
<span class="line"><span>        value: {</span></span>
<span class="line"><span>            type: Boolean,</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        button: {</span></span>
<span class="line"><span>            type: Boolean,</span></span>
<span class="line"><span>            default: false,</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        left: {</span></span>
<span class="line"><span>            type: Boolean,</span></span>
<span class="line"><span>            default: true,</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        right: {</span></span>
<span class="line"><span>            type: Boolean,</span></span>
<span class="line"><span>            default: false,</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        height: {</span></span>
<span class="line"><span>            type: Number,</span></span>
<span class="line"><span>            default: 32,</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        lineHeight: {</span></span>
<span class="line"><span>            type: Number,</span></span>
<span class="line"><span>            default: undefined,</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        padding: {</span></span>
<span class="line"><span>            type: Number,</span></span>
<span class="line"><span>            default: undefined, // button: 20, check: 6</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    setup(props, context) {</span></span>
<span class="line"><span>        const onlyCheck = context.slots.default === undefined</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        const classList = computed(() =&gt; {</span></span>
<span class="line"><span>            console.log(&#39;props.value&#39;, props.value);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            const list = []</span></span>
<span class="line"><span>            if (props.button) {</span></span>
<span class="line"><span>                list.push(&#39;Button&#39;)</span></span>
<span class="line"><span>                if (!props.value) {</span></span>
<span class="line"><span>                    list.push(&#39;White&#39;)</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span>            } else {</span></span>
<span class="line"><span>                list.push(&#39;check&#39;)</span></span>
<span class="line"><span>                if (props.value) {</span></span>
<span class="line"><span>                    list.push(&#39;selected&#39;)</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            console.log(&#39;list&#39;, list);</span></span>
<span class="line"><span>            return list</span></span>
<span class="line"><span>        })</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        const styles = computed(() =&gt; {</span></span>
<span class="line"><span>            if (props.button) {</span></span>
<span class="line"><span>                return {</span></span>
<span class="line"><span>                    height: \`\${props.height}px\`,</span></span>
<span class="line"><span>                    lineHeight: \`\${props.lineHeight || (props.height - 2)}px\`,</span></span>
<span class="line"><span>                    padding: \`0 \${props.padding || 20}px\`,</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span>            } else {</span></span>
<span class="line"><span>                const padding = props.padding || 6</span></span>
<span class="line"><span>                if (onlyCheck) {</span></span>
<span class="line"><span>                    return {</span></span>
<span class="line"><span>                        width: &#39;14px&#39;,</span></span>
<span class="line"><span>                        height: &#39;14px&#39;,</span></span>
<span class="line"><span>                    }</span></span>
<span class="line"><span>                } else if (props.right) {</span></span>
<span class="line"><span>                    return {</span></span>
<span class="line"><span>                        height: \`\${props.height}px\`,</span></span>
<span class="line"><span>                        lineHeight: \`\${props.lineHeight || props.height}px\`,</span></span>
<span class="line"><span>                        paddingLeft: \`\${padding}px\`,</span></span>
<span class="line"><span>                        paddingRight: \`\${padding + 14}px\`,</span></span>
<span class="line"><span>                        backgroundPositionX: &#39;100%&#39;,</span></span>
<span class="line"><span>                    }</span></span>
<span class="line"><span>                } else if (props.left) {</span></span>
<span class="line"><span>                    return {</span></span>
<span class="line"><span>                        height: \`\${props.height}px\`,</span></span>
<span class="line"><span>                        lineHeight: \`\${props.lineHeight || props.height}px\`,</span></span>
<span class="line"><span>                        paddingLeft: \`\${padding + 14}px\`,</span></span>
<span class="line"><span>                        paddingRight: \`\${padding}px\`,</span></span>
<span class="line"><span>                        backgroundPositionX: &#39;0%&#39;,</span></span>
<span class="line"><span>                    }</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span>                return {}</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        })</span></span>
<span class="line"><span></span></span>
<span class="line"><span>       const clickButton = () =&gt; {</span></span>
<span class="line"><span>            context.emit(&#39;update:value&#39;, !props.value);</span></span>
<span class="line"><span>       }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>       return {</span></span>
<span class="line"><span>            classList,</span></span>
<span class="line"><span>            styles,</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            clickButton,</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span>&lt;/script&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;style scoped&gt;</span></span>
<span class="line"><span>.Button,</span></span>
<span class="line"><span>.check {</span></span>
<span class="line"><span>    display: inline-block;</span></span>
<span class="line"><span>    vertical-align: top;</span></span>
<span class="line"><span>    cursor: pointer;</span></span>
<span class="line"><span>    user-select: none;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.check {</span></span>
<span class="line"><span>    background-image: url(./img/check_gray.png);</span></span>
<span class="line"><span>    background-position-y: center;</span></span>
<span class="line"><span>    background-repeat: no-repeat;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.check:hover {</span></span>
<span class="line"><span>    color: #0097dd;</span></span>
<span class="line"><span>    /* background-image: url(./img/check_blue.png); */</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.selected {</span></span>
<span class="line"><span>    background-image: url(./img/check_selected.png);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>&lt;/style&gt;</span></span></code></pre></div>`,3),i=[e];function c(t,o,r,u,d,h){return a(),n("div",null,i)}const m=s(l,[["render",c]]);export{f as __pageData,m as default};
