import{_ as n,c as s,o as a,U as p}from"./chunks/framework.zpeVKxWT.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"public/_file/md/demo/echart/line.md","filePath":"public/_file/md/demo/echart/line.md"}'),l={name:"public/_file/md/demo/echart/line.md"},e=p(`<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;template&gt;</span></span>
<span class="line"><span>    &lt;div&gt;</span></span>
<span class="line"><span>        &lt;div id=&quot;echartLine&quot; style=&quot;width: 600px; height: 400px;&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span>    &lt;/div&gt;</span></span>
<span class="line"><span>&lt;/template&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;script&gt;</span></span>
<span class="line"><span>import * as echarts from &#39;echarts&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// let echarts = require(&#39;echarts&#39;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default {</span></span>
<span class="line"><span>    data() {</span></span>
<span class="line"><span>        return {</span></span>
<span class="line"><span>            option: {</span></span>
<span class="line"><span>                title: {</span></span>
<span class="line"><span>                    text: &#39;ECharts入门示例&#39;,</span></span>
<span class="line"><span>                    link: &#39;http://www.baidu.com&#39;,</span></span>
<span class="line"><span>                    subtext: &#39;www.stepday.com&#39;,</span></span>
<span class="line"><span>                    sublink: &#39;http://www.baidu.com&#39;,</span></span>
<span class="line"><span>                    x: &#39;left&#39;,</span></span>
<span class="line"><span>                    y: &#39;top&#39;,</span></span>
<span class="line"><span>                },</span></span>
<span class="line"><span>                legend: {</span></span>
<span class="line"><span>                    left: &#39;center&#39;,</span></span>
<span class="line"><span>                    data: [&#39;折线图1&#39;, &#39;折线图2&#39;],</span></span>
<span class="line"><span>                    textstyle: { // 图例文字的样式</span></span>
<span class="line"><span>                        color: &#39;#000&#39;,</span></span>
<span class="line"><span>                        fontSize: 12,</span></span>
<span class="line"><span>                        fontWeight: 700,</span></span>
<span class="line"><span>                        lineHeight: 18,</span></span>
<span class="line"><span>                    },</span></span>
<span class="line"><span>                    formatter: function(name) {</span></span>
<span class="line"><span>                        console.log(name)</span></span>
<span class="line"><span>                        return &#39;Legend&#39; + name</span></span>
<span class="line"><span>                    },</span></span>
<span class="line"><span>                    // onClick: function(event, legendItem) {</span></span>
<span class="line"><span>                    //     console.log( event)</span></span>
<span class="line"><span>                    //     let qualityName = legendItem.text</span></span>
<span class="line"><span>                    //     console.log(qualityName)</span></span>
<span class="line"><span>                    // },</span></span>
<span class="line"><span>                },</span></span>
<span class="line"><span>                tooltip: { // 提示框</span></span>
<span class="line"><span>                    trigger: &#39;item&#39;,</span></span>
<span class="line"><span>                },</span></span>
<span class="line"><span>                toolbox: { // 工具箱</span></span>
<span class="line"><span>                    show: true,</span></span>
<span class="line"><span>                    feature: {</span></span>
<span class="line"><span>                        mark: {</span></span>
<span class="line"><span>                            show: true,</span></span>
<span class="line"><span>                        },</span></span>
<span class="line"><span>                        dataZoom: {</span></span>
<span class="line"><span>                            show: true,</span></span>
<span class="line"><span>                            title: {</span></span>
<span class="line"><span>                                dataZoom: &#39;区域缩放&#39;,</span></span>
<span class="line"><span>                                dataZoomReset: &#39;区域缩放后退&#39;,</span></span>
<span class="line"><span>                            },</span></span>
<span class="line"><span>                        },</span></span>
<span class="line"><span>                        dataView: {</span></span>
<span class="line"><span>                            show: true,</span></span>
<span class="line"><span>                            readOnly: true,</span></span>
<span class="line"><span>                        },</span></span>
<span class="line"><span>                        magicType: {</span></span>
<span class="line"><span>                            show: true,</span></span>
<span class="line"><span>                            type: [&#39;line&#39;, &#39;bar&#39;],</span></span>
<span class="line"><span>                        },</span></span>
<span class="line"><span>                        restore: {</span></span>
<span class="line"><span>                            show: true,</span></span>
<span class="line"><span>                        },</span></span>
<span class="line"><span>                        saveAsImage: {</span></span>
<span class="line"><span>                            show: true,</span></span>
<span class="line"><span>                        },</span></span>
<span class="line"><span>                    },</span></span>
<span class="line"><span>                },</span></span>
<span class="line"><span></span></span>
<span class="line"><span>                xAxis: {</span></span>
<span class="line"><span>                    name: &#39;x轴&#39;,</span></span>
<span class="line"><span>                    type: &#39;category&#39;,</span></span>
<span class="line"><span>                    data: [&#39;寸衫&#39;, &#39;羊毛衫&#39;, &#39;雪纺衫&#39;, &#39;裤子&#39;, &#39;高跟鞋&#39;, &#39;袜子&#39;],</span></span>
<span class="line"><span>                    nameTextStyle: {</span></span>
<span class="line"><span>                        color: &#39;rgba(157, 62, 62, 1)&#39;,</span></span>
<span class="line"><span>                        fontSize: 16,</span></span>
<span class="line"><span>                    },</span></span>
<span class="line"><span>                },</span></span>
<span class="line"><span>                yAxis: {</span></span>
<span class="line"><span>                    name: &#39;纵轴标题&#39;,</span></span>
<span class="line"><span>                    type: &#39;value&#39;,</span></span>
<span class="line"><span>                    min: 0, // 坐标轴刻度最小值</span></span>
<span class="line"><span>                    max: 25, // 坐标轴刻度最大值</span></span>
<span class="line"><span>                    interval: 5, // 强制设置坐标轴分割间隔</span></span>
<span class="line"><span>                },</span></span>
<span class="line"><span></span></span>
<span class="line"><span>                series: [</span></span>
<span class="line"><span>                    {</span></span>
<span class="line"><span>                        name: &#39;折线图1&#39;, // 名称要与legend中的data数组中的名称对应</span></span>
<span class="line"><span>                        type: &#39;line&#39;,</span></span>
<span class="line"><span>                        data: [5, 20, 36, 10, 10, 20],</span></span>
<span class="line"><span>                        symbolSize: 10, // 调整波形/折线节点的大小</span></span>
<span class="line"><span>                        showSymbol: true, // 是否默认展示圆点，节点的于隐藏</span></span>
<span class="line"><span>                        symbol: &#39;circle&#39;, // 设定为实心点</span></span>
<span class="line"><span>                        itemStyle: {</span></span>
<span class="line"><span>                            normal: {</span></span>
<span class="line"><span>                                color: &#39;#1F824E&#39;, // 改变折线点的颜色</span></span>
<span class="line"><span>                                lineStyle: {</span></span>
<span class="line"><span>                                    color: &#39;#1F824E&#39;, // 改变折线颜色</span></span>
<span class="line"><span>                                },</span></span>
<span class="line"><span>                            },</span></span>
<span class="line"><span>                        },</span></span>
<span class="line"><span>                    },</span></span>
<span class="line"><span></span></span>
<span class="line"><span>                    {</span></span>
<span class="line"><span>                        name: &#39;折线图2&#39;,</span></span>
<span class="line"><span>                        type: &#39;line&#39;,</span></span>
<span class="line"><span>                        data: [20, 10, 46, 30, 20, 10],</span></span>
<span class="line"><span>                        symbolSize: 10, // 调整波形/折线节点的大小</span></span>
<span class="line"><span>                        smooth: false, // 关键点，为true 是不支持虚线，实线就用 true</span></span>
<span class="line"><span>                        itemStyle: {</span></span>
<span class="line"><span>                            normal: {</span></span>
<span class="line"><span>                                color: &#39;pink&#39;, // 改变折线点的颜色</span></span>
<span class="line"><span>                                lineStyle: {</span></span>
<span class="line"><span>                                    type: &#39;dotted&#39;,</span></span>
<span class="line"><span>                                    color: &#39;pink&#39;, // 改变折线颜色</span></span>
<span class="line"><span>                                },</span></span>
<span class="line"><span>                            },</span></span>
<span class="line"><span>                        },</span></span>
<span class="line"><span>                        markPoint: { // 显示一定区域内的最大值和最小值</span></span>
<span class="line"><span>                            data: [</span></span>
<span class="line"><span>                                { type: &#39;max&#39;, name: &#39;最大值&#39; },</span></span>
<span class="line"><span>                                { type: &#39;min&#39;, name: &#39;最小值&#39; },</span></span>
<span class="line"><span>                            ],</span></span>
<span class="line"><span>                        },</span></span>
<span class="line"><span>                    },</span></span>
<span class="line"><span>                ],</span></span>
<span class="line"><span>            },</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    methods: {</span></span>
<span class="line"><span>        initChart() {</span></span>
<span class="line"><span>            let myChart = echarts.init(document.getElementById(&#39;echartLine&#39;))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            // myChart.on(&#39;legendselectchanged&#39;, (obj) =&gt; {</span></span>
<span class="line"><span>            //     let selected = obj.selected</span></span>
<span class="line"><span>            //     let name = obj.name</span></span>
<span class="line"><span>            //     if (selected !== undefined) {</span></span>
<span class="line"><span>            //         if (this.isOnlyClickedOneIsUnSelected(name,selected)) {</span></span>
<span class="line"><span>            //             console.log(1111)</span></span>
<span class="line"><span>            //             this.onlyEnableCurrentSelectedLegend(name, selected, chart)</span></span>
<span class="line"><span>            //         }</span></span>
<span class="line"><span>            //     }</span></span>
<span class="line"><span>            // })</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            myChart.setOption(this.option)</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // isOnlyClickedOneIsUnSelected(name, selected) {</span></span>
<span class="line"><span>        //     let unSelectedCount = 0</span></span>
<span class="line"><span>        //     for (item of selected) {</span></span>
<span class="line"><span>        //         if (!selected.hasOwnProperty(item)) {</span></span>
<span class="line"><span>        //             continue</span></span>
<span class="line"><span>        //         }</span></span>
<span class="line"><span>        //         if (selected[item] === false) {</span></span>
<span class="line"><span>        //             ++unSelectedCount</span></span>
<span class="line"><span>        //         }</span></span>
<span class="line"><span>        //     }</span></span>
<span class="line"><span>        //     return unSelectedCount === 1 &amp;&amp; selected[name] === false</span></span>
<span class="line"><span>        // },</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // onlyEnableCurrentSelectedLegend(name, selected, echartInstance) {</span></span>
<span class="line"><span>        //     let legend = []</span></span>
<span class="line"><span>        //     for (let item of selected) {</span></span>
<span class="line"><span>        //         if (!selected.hasOwnProperty(item)) {</span></span>
<span class="line"><span>        //             continue</span></span>
<span class="line"><span>        //         }</span></span>
<span class="line"><span>        //         legend.push({&#39;name&#39;: item,})</span></span>
<span class="line"><span>        //         echartInstance.dispatchAction({</span></span>
<span class="line"><span>        //             type: &#39;legendToggleSelect&#39;,</span></span>
<span class="line"><span>        //             batch: legend,</span></span>
<span class="line"><span>        //         })</span></span>
<span class="line"><span>        //     }</span></span>
<span class="line"><span>        // },</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    mounted() {</span></span>
<span class="line"><span>        this.initChart()</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>&lt;/script&gt;</span></span></code></pre></div>`,1),i=[e];function c(t,o,r,d,m,h){return a(),s("div",null,i)}const y=n(l,[["render",c]]);export{g as __pageData,y as default};
