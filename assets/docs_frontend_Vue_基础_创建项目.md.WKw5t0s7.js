import{_ as a,c as s,o as e,U as n}from"./chunks/framework.zpeVKxWT.js";const v=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/frontend/Vue/基础/创建项目.md","filePath":"docs/frontend/Vue/基础/创建项目.md"}'),l={name:"docs/frontend/Vue/基础/创建项目.md"},i=n(`<h2 id="基于vuecli3-0快速构建vue项目" tabindex="-1">基于vuecli3.0快速构建vue项目 <a class="header-anchor" href="#基于vuecli3-0快速构建vue项目" aria-label="Permalink to &quot;基于vuecli3.0快速构建vue项目&quot;">​</a></h2><p><a href="https://www.cnblogs.com/lanshengzhong/p/10386986.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/lanshengzhong/p/10386986.html</a><a href="https://juejin.cn/post/6844903775950356488" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903775950356488</a></p><h3 id="工具安装" tabindex="-1">工具安装 <a class="header-anchor" href="#工具安装" aria-label="Permalink to &quot;工具安装&quot;">​</a></h3><ol><li>安装vscode<a href="https://code.visualstudio.com/docs/?dv=win" target="_blank" rel="noreferrer">下载地址</a></li><li>安装node<a href="http://nodejs.cn/download/" target="_blank" rel="noreferrer">下载地址</a>傻瓜安装,安装包同时安装 node 和 npm; 终端或cmd中:验证 node 和 npm 是否成功 node-v npm-V 显示版本号就为成功</li><li>安装yarn终端或cmd中:全局安装=&gt; npm install -g yarn</li><li>安装vue脚手架<a href="https://cli.vuejs.org/zh/guide/installation.html" target="_blank" rel="noreferrer">文档地址</a>终端或 cmd 中:全局安装 ==&gt; npm install -g @vue/cli #OR yarn global add @vue/cli npm install -g @vue/cli@4.5.13 (不加后缀将安装最新版本，加后缀安装指定版本) vue -V查看vue脚手架版本，看是否安装成功 检测安装脚手架是否成功，终端或 cmd 中: vue --version</li></ol><h3 id="构建项目" tabindex="-1">构建项目 <a class="header-anchor" href="#构建项目" aria-label="Permalink to &quot;构建项目&quot;">​</a></h3><ol><li>在终端,用 cd 命令进入你想要创建示例的文件夹,</li><li>执行 vue create hello-world</li><li>使用方向键和 Enter 选择 &quot;Manually selectfeatures(手动选择功能)&quot;选项 你会看到的第一个菜单允许你选择你想要包含在你的项目中的功能。 确保 &quot;Babel&quot; 和 &quot;Linter/Formatter&quot; 这两项是被选中的如果他们没有被选中,使用方向键切换,空格键选中,一旦他们被选中按下 Enter 继绩进行。</li><li>选择 vue 版本。切换选中 &quot;Vue 2.xx&quot; 然后再次按下 Enter</li><li>为 linter/formatter 选择一个配置。 切换选中 &quot;Eslint with error preventiononly&quot; 然后再次按下 Enter。这样辅助我们捕获常见的并且不自以为是的错误。 然后你会被询问需要那种自动化的 lint, 选择 &quot;Lint on save, 这样我们在项目中保存文件的时候就会自动检查错误。按下 Enter 键继续</li><li>选择把配置文件放在哪里。 &quot;In dedicated config files&quot; 这个选项会把你的配置文件比如 ESlint 单独放在一个文件里。 &quot;In package.json&quot; 则会把配置放进项目的 package.json文件里。 选择&quot; In dedicated config files&quot;然后敲下 Enter</li><li>最后会问你,是否选择把本次的选择作为将来的一个预设配置 (Save this as a preset forfuture projects?),这个就完全由你自己决定了。 如果你想把本次的配置作为一个预设配置并且以后想再次使用的话,按下 y , 否则按下 n</li><li>本地运行程序：yarn serve 或 npm run serve</li></ol><h3 id="编码规范" tabindex="-1">编码规范 <a class="header-anchor" href="#编码规范" aria-label="Permalink to &quot;编码规范&quot;">​</a></h3><p><a href="https://v3.cn.vuejs.org/guide/introduction.html" target="_blank" rel="noreferrer">https://v3.cn.vuejs.org/guide/introduction.html</a></p><h4 id="项目文件结构" tabindex="-1">项目文件结构 <a class="header-anchor" href="#项目文件结构" aria-label="Permalink to &quot;项目文件结构&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>|-- dist                       # 打包后文件夹</span></span>
<span class="line"><span>|-- public                     # 静态文件夹</span></span>
<span class="line"><span>|   |-- favicon.ico</span></span>
<span class="line"><span>|   |-- index.html                    #入口页面</span></span>
<span class="line"><span>|-- src                        # 源码目录</span></span>
<span class="line"><span>|   |--assets                        # 模块资源</span></span>
<span class="line"><span>|   |--components                    # vue公共组件</span></span>
<span class="line"><span>|   |--views</span></span>
<span class="line"><span>|   |--App.vue                        # 页面入口文件</span></span>
<span class="line"><span>|   |--main.js                        # 入口文件，加载公共组件</span></span>
<span class="line"><span>|   |--router.js                      # 路由配置</span></span>
<span class="line"><span>|   |--store.js                       # 状态管理</span></span>
<span class="line"><span>|-- .env.pre-release          # 预发布环境</span></span>
<span class="line"><span>|-- .env.production          # 生产环境</span></span>
<span class="line"><span>|-- .env.test              # 测试环境</span></span>
<span class="line"><span>|-- vue.config.js             # 配置文件</span></span>
<span class="line"><span>|-- .eslintrc.js                  # ES-lint校验</span></span>
<span class="line"><span>|-- .gitignore                  # git忽略上传的文件格式</span></span>
<span class="line"><span>|-- babel.config.js               # babel语法编译</span></span>
<span class="line"><span>|-- package.json                # 项目基本信息</span></span>
<span class="line"><span>|-- postcss.config.js            # CSS预处理器(此处默认启用autoprefixer)</span></span></code></pre></div><h3 id="安装路由" tabindex="-1">安装路由: <a class="header-anchor" href="#安装路由" aria-label="Permalink to &quot;安装路由:&quot;">​</a></h3><p><a href="https://router.vuejs.org/zh/installation.html" target="_blank" rel="noreferrer">https://router.vuejs.org/zh/installation.html</a></p><p>执行: <code>vue add router</code> 会添加 view 文件夹,所有的页面文件均添加到此文件夹中</p><h3 id="安装iview" tabindex="-1">安装iview: <a class="header-anchor" href="#安装iview" aria-label="Permalink to &quot;安装iview:&quot;">​</a></h3><p><a href="https://router.vuejs.org/zh/installation.html" target="_blank" rel="noreferrer">https://router.vuejs.org/zh/installation.html</a></p><p>执行: <code>npm install view-design --save</code> 按需导入：安装babel-plugin-import <code>npm install babel-plugin-import --save-dev</code> 根目录文件夹新建 .babel.config.js文件并进行配置 在src文件中新建plugins文件夹并在其中新建一个 iview.js文件，该文件进行按需导入 在main.js 文件中导入 iview.js 文件 <code>import &#39;@/plugins/iview.js</code></p><h3 id="安装vuex" tabindex="-1">安装vuex : <a class="header-anchor" href="#安装vuex" aria-label="Permalink to &quot;安装vuex :&quot;">​</a></h3><p><code>npm install vuex --save</code> 在src文件夹中新建store文件夹，在文件夹中新建 index.js 文件 文件中 import Vue from &#39;vue&#39; import Vuex from &#39;Vuex&#39; Vue.use(Vuex) main.js 文件中导入 import store from &#39;./store&#39; 并在new Vue 中进行注册</p><h3 id="安装-axios" tabindex="-1">安装 axios : <a class="header-anchor" href="#安装-axios" aria-label="Permalink to &quot;安装 axios :&quot;">​</a></h3><p>npm install- save axios\`\` 在 window.js中进行注册,并在main.js文件中导入window.js,在 .eslintrc.js和$this一样进行注册</p><h3 id="安装-is" tabindex="-1">安装 is : <a class="header-anchor" href="#安装-is" aria-label="Permalink to &quot;安装 is :&quot;">​</a></h3><p><code>npm install is_js</code> 在 window.js中进行注册,并在main.js文件中导入window.js,在 .eslintrc.js和$this一样进行注册</p><h3 id="安装-lodash" tabindex="-1">安装 lodash : <a class="header-anchor" href="#安装-lodash" aria-label="Permalink to &quot;安装 lodash :&quot;">​</a></h3><p><code>npm i --save lodash</code></p><p>在 window.js中进行注册,并在main.js文件中导入window.js,在 .eslintrc.js和$this一样进行注册</p><h3 id="安装-dayjs" tabindex="-1">安装 dayjs : <a class="header-anchor" href="#安装-dayjs" aria-label="Permalink to &quot;安装 dayjs :&quot;">​</a></h3><p><code>npm install dayjs --save</code> 在 window.js中进行注册,并在main.js文件中导入window.js,在 .eslintrc.js和$this一样进行注册</p><h3 id="安装-jsonp" tabindex="-1">安装 jsonp : <a class="header-anchor" href="#安装-jsonp" aria-label="Permalink to &quot;安装 jsonp :&quot;">​</a></h3><p><code>npm install jsonp</code> 导入使用(主用用于解决跨域问题)</p><h3 id="安装-less-loader" tabindex="-1">安装 less-loader : <a class="header-anchor" href="#安装-less-loader" aria-label="Permalink to &quot;安装 less-loader :&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm install style-resources-loader vue-cli-plugin-style-resources-loader less-loader less -S</span></span>
<span class="line"><span>npm i less less-loader style-loader css-loader --save-dev</span></span></code></pre></div><p>然后在根目录文件夹中新建 vue.config.js中对其进行配置</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const path = require(&#39;path&#39;)</span></span>
<span class="line"><span>module.exports = {</span></span>
<span class="line"><span>    pluginOptions: {</span></span>
<span class="line"><span>        &#39;style-resources-loader&#39;: {</span></span>
<span class="line"><span>             preProcessor: &#39;less&#39;,</span></span>
<span class="line"><span>             patterns: [</span></span>
<span class="line"><span>                 path.resolve(__dirname, &#39;./src/assets/common/global.less&#39;)</span></span>
<span class="line"><span>             ]</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>less-loader 版本过高可能会报错,解决办法</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm uninstall --save less-loader 卸载less-loader</span></span>
<span class="line"><span>npm install -D less-loader@7.0 安装7.x版本的less-loader</span></span></code></pre></div><h3 id="文件夹" tabindex="-1">文件夹 <a class="header-anchor" href="#文件夹" aria-label="Permalink to &quot;文件夹&quot;">​</a></h3><p>assets文件夹中新建css文件夹放全局样式global.css tabs-customize.css</p><p>main.js 文件中导入全局样式 import &#39;@/assets/css/global.css&#39;</p><p>在src文件夹中新建一个utils文件夹,存放自定义方法</p><p>utils文件中新建window文件夹，window文件夹中新建window.js文件用于注册全部变量 window文件中自定义的函数和配置$this window.$this = $app一样 想在一个源文件里使用全局变量,在 .eslintrc.js中定义这些全局变量,这样 ELInt就不会发出警告了 最后在main.js 文件中导入 window.js文件</p><h3 id="静态页面总结" tabindex="-1">静态页面总结 <a class="header-anchor" href="#静态页面总结" aria-label="Permalink to &quot;静态页面总结&quot;">​</a></h3><ol><li>页面书写按一行一行的写</li><li>根据关联性确定一行中的内容板块盒子 如果盒子呈上下排布那么就用标准流布局 如果盒子呈现左右排布那么就使用浮动布局；如果左右排布的盒子中又有嵌套上下排布的盒子可考虑定位布局</li><li>盒子样式属性书写顺序</li></ol><ul><li>布局定位属性：display / position / float / clear / visibility / overflow（建议 display 第一个写，毕竟关系到模式）</li><li>自身属性：width / height / margin / padding / border / background</li><li>文本属性：color / font / text-decoration / text-align / vertical-align / white- space / break-word</li><li>其他属性（CSS3）：content / cursor / border-radius / box-shadow / text-shadow /background:linear-gradient …</li></ul><ol start="4"><li>根据实际设计页面书写样式 在书写过程中会先量盒子宽高然后给一个背景色和123的内容对盒子位置进行观察，结合浮动 定位 和外边距margin对位 置进行调整，调整完成之后观察盒子内部是否有内边距padding值，然后对文字进行调整</li></ol>`,44),t=[i];function o(p,r,c,d,h,u){return e(),s("div",null,t)}const g=a(l,[["render",o]]);export{v as __pageData,g as default};
