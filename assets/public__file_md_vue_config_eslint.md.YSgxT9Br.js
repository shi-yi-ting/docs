import{_ as s,c as n,o as a,U as p}from"./chunks/framework.zpeVKxWT.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"public/_file/md/vue/config/eslint.md","filePath":"public/_file/md/vue/config/eslint.md"}'),e={name:"public/_file/md/vue/config/eslint.md"},l=p(`<h2 id="eslint配置-实现错误代码标识以及自动修复-参考链接" tabindex="-1">ESLint配置, 实现错误代码标识以及自动修复<a href="https://cn.eslint.org/docs/user-guide/integrations" target="_blank" rel="noreferrer">(参考链接)</a> <a class="header-anchor" href="#eslint配置-实现错误代码标识以及自动修复-参考链接" aria-label="Permalink to &quot;ESLint配置, 实现错误代码标识以及自动修复[(参考链接)](https://cn.eslint.org/docs/user-guide/integrations)&quot;">​</a></h2><p>一、安装 eslint 插件 vscode软件中安装</p><p>二、vscode 扩展设置</p><p>依次点击 文件 &gt; 首选项 &gt; 设置 打开 VSCode 配置文件，添加如下配置：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&quot;eslint.options&quot;: {</span></span>
<span class="line"><span>    &quot;extensions&quot;: [&quot;.js&quot;, &quot;.vue&quot;]</span></span>
<span class="line"><span>},</span></span>
<span class="line"><span>&quot;eslint.validate&quot;: [</span></span>
<span class="line"><span>    &quot;javascript&quot;,</span></span>
<span class="line"><span>    &quot;javascriptreact&quot;,</span></span>
<span class="line"><span>    &quot;vue-html&quot;,</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        &quot;language&quot;: &quot;vue&quot;,</span></span>
<span class="line"><span>        &quot;autoFix&quot;: true</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        &quot;language&quot;: &quot;html&quot;,</span></span>
<span class="line"><span>        &quot;autoFix&quot;: true</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>],</span></span>
<span class="line"><span>&quot;eslint.run&quot;: &quot;onSave&quot;,</span></span>
<span class="line"><span>&quot;eslint.autoFixOnSave&quot;: true,</span></span></code></pre></div><p>如此，每次保存文件的时候就可以根据 .eslintrc.js 配置规则来检查代码和做一些简单的修复</p><h3 id="_1-eslint支持几种格式的配置文件" tabindex="-1">1. ESlint支持几种格式的配置文件 <a class="header-anchor" href="#_1-eslint支持几种格式的配置文件" aria-label="Permalink to &quot;1. ESlint支持几种格式的配置文件&quot;">​</a></h3><p>JavaScript-使用 .eslintrc.js然后输出一个配置对象 YAML-使用 .eslintrc.yaml或, .eslintrc.yml定义配置的结构 JSON-使用 .eslintrc.json去定义配置的结构, ESLint的JSON文件允许 JavaScript风格的注释。 (弃用)使用 .eslintrc,可以使JSON也可以是YAML。 package.json-在 package.json里创建一eslintConfigl属性,在那里定义你的配置</p><h3 id="_2-如果同一个目录下有多个配置文件eslint只会使用一个。优先级顺序如下" tabindex="-1">2.如果同一个目录下有多个配置文件ESlint只会使用一个。优先级顺序如下: <a class="header-anchor" href="#_2-如果同一个目录下有多个配置文件eslint只会使用一个。优先级顺序如下" aria-label="Permalink to &quot;2.如果同一个目录下有多个配置文件ESlint只会使用一个。优先级顺序如下:&quot;">​</a></h3><p>.eslintrc.js .eslintrc.yaml .eslintrc.yml .eslintrc.json .eslintrc package.json</p><h3 id="_3-veturi格式化代码和默认格式化代码发生冲突时可在-settings-json中关闭默认格式化如下-设置为-false表示关闭" tabindex="-1">3.veturi格式化代码和默认格式化代码发生冲突时可在 settings.json中关闭默认格式化如下 设置为 false表示关闭: <a class="header-anchor" href="#_3-veturi格式化代码和默认格式化代码发生冲突时可在-settings-json中关闭默认格式化如下-设置为-false表示关闭" aria-label="Permalink to &quot;3.veturi格式化代码和默认格式化代码发生冲突时可在 settings.json中关闭默认格式化如下 设置为 false表示关闭:&quot;">​</a></h3><h4 id="配置如下" tabindex="-1">配置如下： <a class="header-anchor" href="#配置如下" aria-label="Permalink to &quot;配置如下：&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>/*语言指定配置*/</span></span>
<span class="line"><span>&quot;[html]&quot;: {</span></span>
<span class="line"><span>    &quot;editor.formatOnSave&quot;: true</span></span>
<span class="line"><span>},</span></span>
<span class="line"><span>&quot;[css]&quot;: {</span></span>
<span class="line"><span>    &quot;editor.formatOnSave&quot;: true</span></span>
<span class="line"><span>},</span></span>
<span class="line"><span>&quot;[javescript]&quot;: {</span></span>
<span class="line"><span>    &quot;editor.formatOnSave&quot;: false</span></span>
<span class="line"><span>},</span></span>
<span class="line"><span>&quot;[typescript]&quot;: {</span></span>
<span class="line"><span>    &quot;editor.formatOnSave&quot;: true</span></span>
<span class="line"><span>},</span></span>
<span class="line"><span>&quot;[vue]&quot;: {</span></span>
<span class="line"><span>    &quot;editor.formatOnSave&quot;: true</span></span>
<span class="line"><span>},</span></span></code></pre></div><h4 id="简易版eslint配置" tabindex="-1">简易版eslint配置 <a class="header-anchor" href="#简易版eslint配置" aria-label="Permalink to &quot;简易版eslint配置&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>module.exports = {</span></span>
<span class="line"><span>    root: true,</span></span>
<span class="line"><span>    env: {</span></span>
<span class="line"><span>        node: true,</span></span>
<span class="line"><span>        es2020: true,</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    extends: [</span></span>
<span class="line"><span>        &#39;plugin:vue/essential&#39;,</span></span>
<span class="line"><span>    ],</span></span>
<span class="line"><span>    parser: &#39;vue-eslint-parser&#39;,</span></span>
<span class="line"><span>    parserOptions: {</span></span>
<span class="line"><span>        ecmaVersion: 2020,</span></span>
<span class="line"><span>        sourceType: &#39;module&#39;,</span></span>
<span class="line"><span>        parser: &#39;babel-eslint&#39;,</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    plugins: [&#39;vue&#39;],</span></span>
<span class="line"><span>    globals: {</span></span>
<span class="line"><span>        $this: false,</span></span>
<span class="line"><span>        $t: false,</span></span>
<span class="line"><span>        $tc: false,</span></span>
<span class="line"><span>        qs: false,</span></span>
<span class="line"><span>        axios: false,</span></span>
<span class="line"><span>        axiosCache: false,</span></span>
<span class="line"><span>        async: false,</span></span>
<span class="line"><span>        cookie: false,</span></span>
<span class="line"><span>        dayjs: false,</span></span>
<span class="line"><span>        debounce: false,</span></span>
<span class="line"><span>        debounceAsync: false,</span></span>
<span class="line"><span>        Decimal: false,</span></span>
<span class="line"><span>        is: false,</span></span>
<span class="line"><span>        jQuery: false,</span></span>
<span class="line"><span>        lodash: false,</span></span>
<span class="line"><span>        util: false,</span></span>
<span class="line"><span>        storage: false,</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    rules: {</span></span>
<span class="line"><span>        &#39;vur/component-definition-name-casing&#39;: [&#39;error&#39;, &#39;PascalCase&#39;],</span></span>
<span class="line"><span>        &#39;vue/require-prop-types&#39;: &#39;error&#39;,</span></span>
<span class="line"><span>        &#39;vue/no-unused-components&#39;: 0,</span></span>
<span class="line"><span>        &#39;vue/html-indent&#39;: [&#39;error&#39;, 4],</span></span>
<span class="line"><span>        /* recommended change */</span></span>
<span class="line"><span>        &#39;no-debugger&#39;: [&#39;warn&#39;], // 禁用 debugger</span></span>
<span class="line"><span>        &#39;no-unused-vars&#39;: [&#39;Warn&#39;, { // 禁止出现未使用过的变量</span></span>
<span class="line"><span>            args: &#39;after-used&#39;,</span></span>
<span class="line"><span>        }],</span></span>
<span class="line"><span>        /* Possible Errors */</span></span>
<span class="line"><span>        &#39;no-console&#39;: [&#39;off&#39;, { // 禁用 console</span></span>
<span class="line"><span>            allow: [&#39;info&#39;, &#39; warn&#39;, &#39;error&#39;],</span></span>
<span class="line"><span>        }],</span></span>
<span class="line"><span>        /* Best Practices */</span></span>
<span class="line"><span>        &#39;no-multi-spaces&#39;: [&#39;error&#39;], // 禁止使用多个空格</span></span>
<span class="line"><span>        &#39;require-await&#39;: [&#39;error&#39;], // 禁止使用不带 await 表达式的 async 函数</span></span>
<span class="line"><span>        curly: [&#39;error&#39;, &#39;all&#39;], // 强制所有控制语句使用一致的括号风格</span></span>
<span class="line"><span>        eqeqeq: [&#39;error&#39;, &#39;always&#39;], // 要求使用 === 和 !==</span></span>
<span class="line"><span>        &#39;no-eval&#39;: [&#39;error&#39;], // 禁用 eval()</span></span>
<span class="line"><span>        /* Stylistic Issues */</span></span>
<span class="line"><span>        indent: [&#39;error&#39;, 4, { SwitchCase: 1 }], // 强制使用一致的缩进</span></span>
<span class="line"><span>        &#39;no-trailing-spaces&#39;: [&#39;error&#39;], // 禁用行尾空格</span></span>
<span class="line"><span>        &#39;key-spacing&#39;: [&#39;error&#39;, { // 强制在对象字面量的属性中键和值之间使用一致的间距</span></span>
<span class="line"><span>            beforeColon: false,</span></span>
<span class="line"><span>            afterColon: true,</span></span>
<span class="line"><span>            mode: &#39;strict&#39;,</span></span>
<span class="line"><span>        }],</span></span>
<span class="line"><span>        &#39;no-multiple-empty-lines&#39;: [&#39;error&#39;, { // 禁止出现多行空行</span></span>
<span class="line"><span>            max: 3,</span></span>
<span class="line"><span>            maxEOF: 1,</span></span>
<span class="line"><span>            maxBOF: 1,</span></span>
<span class="line"><span>        }],</span></span>
<span class="line"><span>        &#39;eol-last&#39;: [&#39;error&#39;, &#39;always&#39;], // 要求或禁止文件末尾存在空行</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="模板" tabindex="-1">模板 <a class="header-anchor" href="#模板" aria-label="Permalink to &quot;模板&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// eslint-disable @typescript-eslint/no-var-requires</span></span>
<span class="line"><span>const base = require(&#39;./eslint/eslint.base.js&#39;)</span></span>
<span class="line"><span>// const typescript = require(&#39;./eslint/eslint.typescript.js&#39;)</span></span>
<span class="line"><span>const vue = require(&#39;./eslint/eslint.vue.js&#39;)</span></span>
<span class="line"><span>module.exports = {</span></span>
<span class="line"><span>    // 使用配置文件的第一种方式是通.eslintrc.*和 package.json文件。ESlint将自动在要检测的文件目录里寻找它们,紧接着是父级目录, 一直到文件系统的根目录(除非指定root:true)</span></span>
<span class="line"><span>    // 当你想对一个项目的不同部分的使用不同配置,或当你希望别人能够直接使用 ESlint,而无需记住要在配置文件中传递什么,这种方式就很有用</span></span>
<span class="line"><span>    root: true, // ESlint一旦发现配置文件中有root: true,它就会停止在父级目录中寻</span></span>
<span class="line"><span>    env: { // 要在配置文件里指定环境,使用env关键字指定你想启用的环境,并设置它们为true</span></span>
<span class="line"><span>        node: true, // node环境</span></span>
<span class="line"><span>        es2020: true,</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    // 值为&quot; eslint: recommended&quot;的 extends属性启用一系列核心规则,这些规则报告一些常见问题,在规则页面中被标记为</span></span>
<span class="line"><span>    // 这个推荐的子集只能在 ESlint主要版本进行更新</span></span>
<span class="line"><span>    // 如果你的配置集成了推荐的规则:在你升级到ESlint新的主版本之后，在你使用命令行的 --fix选项之前，检查一下报告问题，这样你就知道一个新的可修复的推荐的规则将更改代码</span></span>
<span class="line"><span>    extends: [</span></span>
<span class="line"><span>        // &#39;eslint: recommended&#39;,</span></span>
<span class="line"><span>        // &#39;@vue/typescript/recommended&#39;,</span></span>
<span class="line"><span>        // &#39;plugin: vue/recommended&#39;,</span></span>
<span class="line"><span>        ...base.extents,</span></span>
<span class="line"><span>        // ...typescript.extends,</span></span>
<span class="line"><span>        ...vue.extends,</span></span>
<span class="line"><span>    ],</span></span>
<span class="line"><span>    // 指定你想要支持的 JavaScript语言选项。默认情况下, ESLint支持 ECMAScript5语法。你可以覆盖该设置,以启用对ECMAScript其他版本和JSX的支持</span></span>
<span class="line"><span>    parserOptions: {</span></span>
<span class="line"><span>        ecmaVersion: 2020, // 默认设置为3,5(默认),你可以使用6、7、8、9或10来指定你想要使用的 ECMAScript版本。你也可以用使用年份命名的版本号指定2015(同6),2016(同7)2017(同8)或2018(同9)或2019(same as 10)</span></span>
<span class="line"><span>        sourceType: &#39;module&#39;, // 设置&quot; script&quot;(默认)或&quot; module&quot;如果你的代码是在 ECMAScript中的模块</span></span>
<span class="line"><span>        ecmaFeatures: { // 这是个对象,表示你想使用的额外的语言特性</span></span>
<span class="line"><span>            globalReturn: true, // 允许在全局作用域下使用 return语句</span></span>
<span class="line"><span>            impliedStrict: true, // 启用全局 strict mode(如果 ecmaversion是5或更高)</span></span>
<span class="line"><span>            jsx: true, // 启用Jsx</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        // ESlint默认使用Espree作为其解析器,你可以在配置文件中指不同的解析器,只要该解析器符合下列要求，设置解析器选项能帮助ESlint确定什么是解析错误，所有语言选项默认都是false</span></span>
<span class="line"><span>        // parser: &#39;babel-eslint&#39;,</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    // 插件可以提供处理器。处理器可以从另一种文件中提取 JavaScript代码,然后让 ESLin检测 JavaScript代码。或者处理器可以在预处理中转换 JavaScript代码。</span></span>
<span class="line"><span>    // ESlint支持使用第三方插件。在使用插件之前,你必须使用npm安装它。在配置文件里配置插件时,可以使用 plugins关键字来存放插件名字的列表。插件名称可以省略 eslint-plugin-前缀。</span></span>
<span class="line"><span>    plugins: [</span></span>
<span class="line"><span>        // &#39;@typescript-eslint&#39;,</span></span>
<span class="line"><span>        ...base.plugins,</span></span>
<span class="line"><span>        // ...typescript.plugins,</span></span>
<span class="line"><span>        ...vue.plugins,</span></span>
<span class="line"><span>    ],</span></span>
<span class="line"><span>    // 当访问当前源文件内未定义的变量时,no-undef规则将发出警告。如果你想在一个源文件里使用全局变量,推荐你在 ESlint中定义这些全局变量,这样 ESlint 就不会发出警告</span></span>
<span class="line"><span>    // 你可以使用注释或在配置文件中定义全局量。布尔值false和字符串值&quot;readable&quot;等价于&quot;readonly&quot;。类似地,布尔值true和字符串值 &quot;writeable&quot;等价于 &quot;writable&quot;。但是,不建议使用旧值</span></span>
<span class="line"><span>    globals: {</span></span>
<span class="line"><span>        // $this: false,</span></span>
<span class="line"><span>        // $t: false,</span></span>
<span class="line"><span>        // $tc: false,</span></span>
<span class="line"><span>        // qs: false,</span></span>
<span class="line"><span>        // axios: false,</span></span>
<span class="line"><span>        // axiosCache: false,</span></span>
<span class="line"><span>        // async: false,</span></span>
<span class="line"><span>        // cookie: false,</span></span>
<span class="line"><span>        // dayjs: false,</span></span>
<span class="line"><span>        // debounce: false,</span></span>
<span class="line"><span>        // debounceAsync: false,</span></span>
<span class="line"><span>        // Decimal: false,</span></span>
<span class="line"><span>        // is: false,</span></span>
<span class="line"><span>        // jQuery: false,</span></span>
<span class="line"><span>        // lodash: false,</span></span>
<span class="line"><span>        // util: false,</span></span>
<span class="line"><span>        // storage: false,</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    // ELInt附带有大量的规则。你可以使用注释或配置文件修改你项目中要使用的规则。要改变一个规则设置,你必须将规则D设置为下列值之一：</span></span>
<span class="line"><span>    // &quot;off&quot;或0-关闭规则</span></span>
<span class="line"><span>    // &quot;warn&quot;或1-开启规则,使用警告级别的错误:warn(不会导致程序退出)</span></span>
<span class="line"><span>    // &quot;eror&quot;或2-开启规则,使用错误级别的错误:eror(当被触发的时候,程序会退出)</span></span>
<span class="line"><span>    rules: {</span></span>
<span class="line"><span>        // &#39;no-console&#39;: process.env.NODE_ENV === &#39;production&#39; ? &#39;warn&#39; : &#39;off&#39;,</span></span>
<span class="line"><span>        // &#39;no-debugger&#39;: process.env.NODE_ENV === &#39;production&#39; ? &#39;warn&#39; : &#39;off&#39;</span></span>
<span class="line"><span>        ...base.rules,</span></span>
<span class="line"><span>        // ...typescript.rules,</span></span>
<span class="line"><span>        ...vue.rules,</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,17),i=[l];function t(c,o,r,u,d,q){return a(),n("div",null,i)}const v=s(e,[["render",t]]);export{h as __pageData,v as default};
