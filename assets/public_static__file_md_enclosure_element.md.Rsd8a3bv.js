import{_ as n,c as s,o as a,U as p}from"./chunks/framework.zpeVKxWT.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"public/static/_file/md/enclosure/element.md","filePath":"public/static/_file/md/enclosure/element.md"}'),l={name:"public/static/_file/md/enclosure/element.md"},e=p(`<h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p><a href="https://element.eleme.cn/#/zh-CN/component/installation" target="_blank" rel="noreferrer">官网链接</a></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm i element-ui -S</span></span></code></pre></div><h2 id="注册" tabindex="-1">注册 <a class="header-anchor" href="#注册" aria-label="Permalink to &quot;注册&quot;">​</a></h2><p>使用 <code>unplugin-auto-import</code>，<code>unplugin-vue-components</code>按需自动导入</p><h3 id="安装相关依赖" tabindex="-1">安装相关依赖 <a class="header-anchor" href="#安装相关依赖" aria-label="Permalink to &quot;安装相关依赖&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm install unplugin-auto-import -D</span></span>
<span class="line"><span>npm install unplugin-vue-components -D</span></span></code></pre></div><h3 id="在vite-config-js中进行配置" tabindex="-1">在vite.config.js中进行配置 <a class="header-anchor" href="#在vite-config-js中进行配置" aria-label="Permalink to &quot;在vite.config.js中进行配置&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>/* eslint-disable new-cap */</span></span>
<span class="line"><span>import path from &#39;path&#39;</span></span>
<span class="line"><span>const pathSrc = path.resolve(__dirname, &#39;src&#39;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import AutoImport from &#39;unplugin-auto-import/vite&#39; // 按需自动导入API</span></span>
<span class="line"><span>import Components from &#39;unplugin-vue-components/vite&#39; // 按需自动导入组件</span></span>
<span class="line"><span>import { ElementPlusResolver, AntDesignVueResolver } from &#39;unplugin-vue-components/resolvers&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// import md from &#39;vite-plugin-md&#39; // markDown文件处理</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 适配</span></span>
<span class="line"><span>import postCssPxToRem from &#39;postcss-pxtorem&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import { defineConfig } from &#39;vite&#39;</span></span>
<span class="line"><span>import vue from &#39;@vitejs/plugin-vue&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// https://vitejs.dev/config/</span></span>
<span class="line"><span>export default defineConfig({</span></span>
<span class="line"><span>    server: {</span></span>
<span class="line"><span>        host: &#39;0.0.0.0&#39;, // ip地址</span></span>
<span class="line"><span>        port: 8080, // 端口</span></span>
<span class="line"><span>        // open: true, // 服务启动时自动在浏览器中打开应用</span></span>
<span class="line"><span>        // https: false,//是否启用 http 2</span></span>
<span class="line"><span>        // cors: true,//为开发服务器配置 CORS , 默认启用并允许任何源</span></span>
<span class="line"><span>        // strictPort: false, //设为true时端口被占用则直接退出，不会尝试下一个可用端口</span></span>
<span class="line"><span>        // force: true,//是否强制依赖预构建</span></span>
<span class="line"><span>        // hmr: true,//禁用或配置 HMR 连接</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    plugins: [</span></span>
<span class="line"><span>        vue(),</span></span>
<span class="line"><span>        AutoImport({ // 自动导入 Vue 相关函数，如：ref, reactive, toRef 等</span></span>
<span class="line"><span>            imports: [&#39;vue&#39;],</span></span>
<span class="line"><span>            eslintrc: {</span></span>
<span class="line"><span>                enabled: true, // 是否自动生成 eslint 规则，建议生成之后设置 false</span></span>
<span class="line"><span>                filepath: &#39;./.eslintrc-auto-import.json&#39;, // 指定自动导入函数 eslint 规则的文件</span></span>
<span class="line"><span>            },</span></span>
<span class="line"><span>            dts: path.resolve(pathSrc, &#39;types&#39;, &#39;auto-imports.d.ts&#39;), // 指定自动导入函数TS类型声明文件路径</span></span>
<span class="line"><span>            resolvers: [</span></span>
<span class="line"><span>                ElementPlusResolver(),</span></span>
<span class="line"><span>            ],</span></span>
<span class="line"><span>        }),</span></span>
<span class="line"><span>        Components({ // 按需加载自定义组件</span></span>
<span class="line"><span>            deep: true, // 搜索子目录</span></span>
<span class="line"><span>            dirs: [&#39;src/components&#39;], // 按需加载的文件夹</span></span>
<span class="line"><span>            resolvers: [</span></span>
<span class="line"><span>                ElementPlusResolver(), // ElementPlus按需加载</span></span>
<span class="line"><span>                AntDesignVueResolver(), // 貌似这种还无法 4 版本的样式</span></span>
<span class="line"><span>            ],</span></span>
<span class="line"><span>        }),</span></span>
<span class="line"><span>    ],</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    resolve: {</span></span>
<span class="line"><span>        alias: {</span></span>
<span class="line"><span>        // &#39;@&#39;: fileURLToPath(new URL(&#39;./src&#39;, import.meta.url)),</span></span>
<span class="line"><span>            &#39;@&#39;: pathSrc,</span></span>
<span class="line"><span>            &#39;/\\\\.md$/&#39;: &#39;raw-loader&#39;, // 添加 .md 文件处理的自定义加载器</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // css: {</span></span>
<span class="line"><span>    //     postcss: {</span></span>
<span class="line"><span>    //         plugins: [</span></span>
<span class="line"><span>    //             postCssPxToRem({</span></span>
<span class="line"><span>    //                 // 自适应，px&gt;rem转换</span></span>
<span class="line"><span>    //                 rootValue: 16, // 相当与把窗口切成120等份</span></span>
<span class="line"><span>    //                 propList: [&#39;*&#39;], // 需要转换的属性，这里选择全部都进行转换</span></span>
<span class="line"><span>    //                 selectorBlackList: [&#39;norem&#39;], // 过滤掉norem-开头的class，不进行rem转换，这个内容可以不写</span></span>
<span class="line"><span>    //             }),</span></span>
<span class="line"><span>    //         ],</span></span>
<span class="line"><span>    //     },</span></span>
<span class="line"><span>    // },</span></span>
<span class="line"><span>})</span></span></code></pre></div><h3 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;a-space&gt;</span></span>
<span class="line"><span>    &lt;a-popconfirm title=&quot;确定删除?&quot; okText=&quot;删除&quot; @confirm=&quot;deleteItem(record.id)&quot;&gt;</span></span>
<span class="line"><span>        &lt;el-button size=&quot;small&quot; danger @click.stop&gt;删除&lt;/el-button&gt;</span></span>
<span class="line"><span>    &lt;/a-popconfirm&gt;</span></span>
<span class="line"><span>&lt;/a-space&gt;</span></span></code></pre></div><h2 id="第二中导入方式" tabindex="-1">第二中导入方式 <a class="header-anchor" href="#第二中导入方式" aria-label="Permalink to &quot;第二中导入方式&quot;">​</a></h2><p><strong>1.首先在src文件夹下新建一个plugins文件夹，里面新建element.js，内容如下：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>import {</span></span>
<span class="line"><span>ElButton,</span></span>
<span class="line"><span>ElForm,</span></span>
<span class="line"><span>ElFormItem,</span></span>
<span class="line"><span>ElInput,</span></span>
<span class="line"><span>ElMessage,</span></span>
<span class="line"><span>ElContainer,</span></span>
<span class="line"><span>ElHeader,</span></span>
<span class="line"><span>ElAside,</span></span>
<span class="line"><span>ElMain,</span></span>
<span class="line"><span>ElMenu,</span></span>
<span class="line"><span>// ElSubmenu,</span></span>
<span class="line"><span>ElMenuItem,</span></span>
<span class="line"><span>ElBreadcrumb,</span></span>
<span class="line"><span>ElBreadcrumbItem,</span></span>
<span class="line"><span>ElCard,</span></span>
<span class="line"><span>ElRow,</span></span>
<span class="line"><span>ElCol,</span></span>
<span class="line"><span>ElTable,</span></span>
<span class="line"><span>ElTableColumn,</span></span>
<span class="line"><span>ElSwitch,</span></span>
<span class="line"><span>ElTooltip,</span></span>
<span class="line"><span>ElPagination,</span></span>
<span class="line"><span>ElDialog,</span></span>
<span class="line"><span>ElMessageBox,</span></span>
<span class="line"><span>ElTag,</span></span>
<span class="line"><span>ElTree,</span></span>
<span class="line"><span>ElSelect,</span></span>
<span class="line"><span>ElOption,</span></span>
<span class="line"><span>ElCascader,</span></span>
<span class="line"><span>ElAlert,</span></span>
<span class="line"><span>ElTabs,</span></span>
<span class="line"><span>ElTabPane,</span></span>
<span class="line"><span>ElSteps,</span></span>
<span class="line"><span>ElStep,</span></span>
<span class="line"><span>ElCheckboxGroup,</span></span>
<span class="line"><span>ElCheckbox,</span></span>
<span class="line"><span>ElUpload,</span></span>
<span class="line"><span>ElPopover, // 弹框</span></span>
<span class="line"><span>ElLoading, // 加载。。。</span></span>
<span class="line"><span>ElDatePicker,</span></span>
<span class="line"><span>ElDropdown,</span></span>
<span class="line"><span>ElDropdownMenu,</span></span>
<span class="line"><span>ElDropdownItem,</span></span>
<span class="line"><span>} from &#39;element-plus&#39;</span></span>
<span class="line"><span>import &#39;element-plus/dist/index.css&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export const setupElement = (app) =&gt; {</span></span>
<span class="line"><span>console.log(&#39;app&#39;, app)</span></span>
<span class="line"><span>app.component(&#39;ElButton&#39;, ElButton)</span></span>
<span class="line"><span>app.component(&#39;ElForm&#39;, ElForm)</span></span>
<span class="line"><span>app.component(&#39;ElFormItem&#39;, ElFormItem)</span></span>
<span class="line"><span>app.component(&#39;ElInput&#39;, ElInput)</span></span>
<span class="line"><span>app.component(&#39;ElMessage&#39;, ElMessage)</span></span>
<span class="line"><span>app.component(&#39;ElContainer&#39;, ElContainer)</span></span>
<span class="line"><span>app.component(&#39;ElHeader&#39;, ElHeader)</span></span>
<span class="line"><span>app.component(&#39;ElAside&#39;, ElAside)</span></span>
<span class="line"><span>app.component(&#39;ElMain&#39;, ElMain)</span></span>
<span class="line"><span>app.component(&#39;ElMenu&#39;, ElMenu)</span></span>
<span class="line"><span>// app.component(&#39;ElSubmenu&#39;, ElSubmenu)</span></span>
<span class="line"><span>app.component(&#39;ElMenuItem&#39;, ElMenuItem)</span></span>
<span class="line"><span>app.component(&#39;ElBreadcrumb&#39;, ElBreadcrumb)</span></span>
<span class="line"><span>app.component(&#39;ElBreadcrumbItem&#39;, ElBreadcrumbItem)</span></span>
<span class="line"><span>app.component(&#39;ElCard&#39;, ElCard)</span></span>
<span class="line"><span>app.component(&#39;ElRow&#39;, ElRow)</span></span>
<span class="line"><span>app.component(&#39;ElCol&#39;, ElCol)</span></span>
<span class="line"><span>app.component(&#39;ElTable&#39;, ElTable)</span></span>
<span class="line"><span>app.component(&#39;ElTableColumn&#39;, ElTableColumn)</span></span>
<span class="line"><span>app.component(&#39;ElSwitch&#39;, ElSwitch)</span></span>
<span class="line"><span>app.component(&#39;ElTooltip&#39;, ElTooltip)</span></span>
<span class="line"><span>app.component(&#39;ElPagination&#39;, ElPagination)</span></span>
<span class="line"><span>app.component(&#39;ElDialog&#39;, ElDialog)</span></span>
<span class="line"><span>app.component(&#39;ElMessageBox&#39;, ElMessageBox)</span></span>
<span class="line"><span>app.component(&#39;ElTag&#39;, ElTag)</span></span>
<span class="line"><span>app.component(&#39;ElTree&#39;, ElTree)</span></span>
<span class="line"><span>app.component(&#39;ElSelect&#39;, ElSelect)</span></span>
<span class="line"><span>app.component(&#39;ElOption&#39;, ElOption)</span></span>
<span class="line"><span>app.component(&#39;ElCascader&#39;, ElCascader)</span></span>
<span class="line"><span>app.component(&#39;ElAlert&#39;, ElAlert)</span></span>
<span class="line"><span>app.component(&#39;ElTabs&#39;, ElTabs)</span></span>
<span class="line"><span>app.component(&#39;ElTabPane&#39;, ElTabPane)</span></span>
<span class="line"><span>app.component(&#39;ElSteps&#39;, ElSteps)</span></span>
<span class="line"><span>app.component(&#39;ElStep&#39;, ElStep)</span></span>
<span class="line"><span>app.component(&#39;ElCheckboxGroup&#39;, ElCheckboxGroup)</span></span>
<span class="line"><span>app.component(&#39;ElCheckbox&#39;, ElCheckbox)</span></span>
<span class="line"><span>app.component(&#39;ElUpload&#39;, ElUpload)</span></span>
<span class="line"><span>app.component(&#39;ElPopover&#39;, ElPopover)</span></span>
<span class="line"><span>app.component(&#39;ElLoading&#39;, ElLoading)</span></span>
<span class="line"><span>app.component(&#39;ElDatePicker&#39;, ElDatePicker)</span></span>
<span class="line"><span>app.component(&#39;ElDropdown&#39;, ElDropdown)</span></span>
<span class="line"><span>app.component(&#39;ElDropdownMenu&#39;, ElDropdownMenu)</span></span>
<span class="line"><span>app.component(&#39;ElDropdownItem&#39;, ElDropdownItem)</span></span>
<span class="line"><span>}</span></span></code></pre></div><p><strong>2.在main.js中导入使用暴漏出来的函数传参app，如下：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>import { createApp } from &#39;vue&#39;</span></span>
<span class="line"><span>import App from &#39;./App.vue&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// import router from &#39;./router&#39;</span></span>
<span class="line"><span>import { setupRouter } from &#39;@/router/index.js&#39;</span></span>
<span class="line"><span>import { setupElement } from &#39;@/plugins/element.js&#39;</span></span>
<span class="line"><span>import { setupIcons } from &#39;@/plugins/antIcons.js&#39;</span></span>
<span class="line"><span>import { setupBaseComponents } from &#39;@/plugins/base.ts&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// import &#39;./assets/main.css&#39;</span></span>
<span class="line"><span>import &#39;@/assets/css/common.css&#39;</span></span>
<span class="line"><span>import &#39;ant-design-vue/dist/antd.css&#39; // 这里不导入的话在js中使用的ant组件样式将出不来</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import &#39;@/globals/globals.js&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 页面适配</span></span>
<span class="line"><span>// import &#39;amfe-flexible&#39; // 适用与H5，貌似不适用pc端</span></span>
<span class="line"><span>// import &#39;lib-flexible/flexible&#39; // 适用与H5，貌似不适用pc端</span></span>
<span class="line"><span>// import &#39;@/utils/rem.js&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const app = createApp(App)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>setupRouter(app) // 挂载 路由 --- 原来：app.use(router)</span></span>
<span class="line"><span>setupElement(app) // ui库注册</span></span>
<span class="line"><span>setupIcons(app)</span></span>
<span class="line"><span>setupBaseComponents(app)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>app.mount(&#39;#app&#39;)</span></span></code></pre></div>`,16),i=[e];function t(o,c,r,m,u,d){return a(),s("div",null,i)}const g=n(l,[["render",t]]);export{h as __pageData,g as default};
